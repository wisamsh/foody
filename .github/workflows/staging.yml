name: Foody Staging Pipeline

on:
  push:
    branches:
      # - staging
      - pipeline

jobs:
  build:
    # runs-on: ubuntu-latest
    runs-on: self-hosted
    env:
      TFVARSFILE: "terraform.tfvars"
      ENVOY_SERVER: "medio-dev"
      ENVOY_BRANCH: "pipeline"
      ASG_NAME: "foody-staging-autoscale-group"
      ASG_DESIRED_CAPACITY: "1"
      ASG_MIN_SIZE: "1"
      ASG_MAX_SIZE: "2"
      AWS_INSTANCE_ID: "i-01bd0f1c63f3152b0"
      INSTANCE_TYPE: "t3.large"
      KEY_NAME: "foody-dev-medio"
      SECURITY_GROUP_ID: "sg-03f4f895b2b9c9f2f"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP 7
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          extensions: mysql, curl, gd, mbstring, xml, zip, intl, bcmath, iconv, exif, pcntl, pdo, pdo_mysql, mysqli, tokenizer, json, sockets, imagick

      - name: Install Node.js
        uses: dcodeIO/setup-node-nvm@master
        with:
          node-version: v8.17.0

      # - name: Setup Node.js Version
      #   run: |
      #     nvm install v8.17.0
      #     nvm use v8.17.0

      - name: Install Python
        run: |
          sudo apt update
          sudo apt install -y python2
          python2 --version

      - name: .env Setup
        env:
          DB_HOST: ${{ vars.DB_HOST_STAGING }}
          DB_NAME: ${{ vars.DB_NAME }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD_STAGING }}
        run: chmod +x .github/script/env_setup.sh && .github/script/env_setup.sh

      - name: SSH Keys
        env:
          SSH_KEY: ${{ secrets.SSH_KEY_STAGING }}
        run: chmod +x .github/script/create_ssh_config.sh && .github/script/create_ssh_config.sh

      - name: Envoy Setup
        run: composer global require laravel/envoy

      - name: Install Composer
        run: |
          php -r "copy('https://getcomposer.org/download/1.10.20/composer.phar', 'composer.phar');"
          chmod +x composer.phar
          sudo mv composer.phar /usr/local/bin/composer

      - name: Install project dependencies
        run: composer install

      - name: Install npm dependencies
        working-directory: web/app/themes/Foody
        run: |
          npm -v
          rm -rf node_modules
          rm package-lock.json
          npm install
          npm uninstall node-sass
          npm install node-sass@4.9.1
          npm rebuild node-sass 

      - name: Envoy deploy
        run: envoy run deploy --target=${{ env.ENVOY_SERVER }} --branch=${{ env.ENVOY_BRANCH }}

      - name: Install Node.js
        uses: dcodeIO/setup-node-nvm@master
        with:
          node-version: stable

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Provider
        working-directory: .github/script/terraform
        env:
          BUCKET_NAME: ${{ vars.BUCKET_NAME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          DYNAMODB_TABLE_NAME: ${{ vars.DYNAMODB_TABLE_NAME }}
          AWS_INSTANCE_ID: ${{ env.AWS_INSTANCE_ID }}
          INSTANCE_TYPE: ${{ env.INSTANCE_TYPE }}
          KEY_NAME: ${{ env.KEY_NAME }}
          SECURITY_GROUP_ID: ${{ env.SECURITY_GROUP_ID }}
          ASG_NAME: ${{ env.ASG_NAME }}
          TF_STATE_KEY: ${{ vars.TF_STATE_KEY_STAGING }}
          ASG_DESIRED_CAPACITY: ${{ env.ASG_DESIRED_CAPACITY }}
          ASG_MIN_SIZE: ${{ env.ASG_MIN_SIZE }}
          ASG_MAX_SIZE: ${{ env.ASG_MAX_SIZE }}
        run: |
          chmod +x ../terraform_provider.sh && ../terraform_provider.sh
          chmod +x ../create_tfvars.sh && ../create_tfvars.sh

      - name: Terraform Init
        working-directory: .github/script/terraform
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: terraform init
          
      - name: Terraform Import
        working-directory: .github/script/terraform
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: terraform import aws_autoscaling_group.main ${{ env.ASG_NAME }} || true

      - name: Terraform Plan
        working-directory: .github/script/terraform
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: terraform plan -out=tfplan -var-file=${{ env.TFVARSFILE }}

      - name: Terraform Apply
        working-directory: .github/script/terraform
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: terraform apply -auto-approve tfplan
